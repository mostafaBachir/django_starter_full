# Generated by Django 5.2.3 on 2025-06-27 17:53

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('receipts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(verbose_name='Description')),
                ('reward_type', models.CharField(choices=[('cashback', 'Cashback'), ('gift_card', 'Carte cadeau'), ('product', 'Produit'), ('donation', 'Don charité'), ('sweepstake', 'Tirage'), ('discount', 'Rabais')], max_length=20)),
                ('category', models.CharField(blank=True, max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to='rewards/images/')),
                ('icon', models.CharField(default='gift', max_length=50)),
                ('points_cost', models.IntegerField(verbose_name='Coût en points')),
                ('cash_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Valeur monétaire')),
                ('stock_quantity', models.IntegerField(default=-1, help_text='-1 pour illimité', verbose_name='Stock')),
                ('limit_per_user', models.IntegerField(default=0, help_text='0 pour pas de limite', verbose_name='Limite par utilisateur')),
                ('partner_name', models.CharField(blank=True, max_length=100, verbose_name='Partenaire')),
                ('partner_logo', models.ImageField(blank=True, null=True, upload_to='rewards/partners/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('available_until', models.DateTimeField(blank=True, null=True)),
                ('terms_conditions', models.TextField(blank=True, verbose_name='Conditions')),
                ('delivery_info', models.JSONField(blank=True, default=dict, verbose_name='Info livraison')),
                ('times_redeemed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Récompense',
                'verbose_name_plural': 'Récompenses',
                'db_table': 'rewards_reward',
                'ordering': ['points_cost', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RewardProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du programme')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(verbose_name='Description')),
                ('points_per_dollar', models.IntegerField(default=10, verbose_name='Points par dollar')),
                ('points_per_receipt', models.IntegerField(default=5, verbose_name='Points par reçu')),
                ('daily_receipt_limit', models.IntegerField(default=20, verbose_name='Limite reçus/jour')),
                ('monthly_receipt_limit', models.IntegerField(default=500, verbose_name='Limite reçus/mois')),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Programme de récompenses',
                'verbose_name_plural': 'Programmes de récompenses',
                'db_table': 'rewards_program',
            },
        ),
        migrations.CreateModel(
            name='SpinWheel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Roue InovoCB', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('points_cost', models.IntegerField(default=0, help_text='0 pour gratuit')),
                ('theme', models.JSONField(blank=True, default=dict, help_text='Couleurs, animations, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Roue de fortune',
                'verbose_name_plural': 'Roues de fortune',
                'db_table': 'rewards_spin_wheel',
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(unique=True, verbose_name='Niveau')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('icon', models.CharField(default='star', max_length=50, verbose_name='Icône')),
                ('color', models.CharField(default='#FFD700', max_length=7, verbose_name='Couleur')),
                ('points_required', models.IntegerField(verbose_name='Points requis')),
                ('receipts_required', models.IntegerField(default=0, verbose_name='Reçus requis')),
                ('cashback_bonus', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Bonus cashback %')),
                ('points_multiplier', models.DecimalField(decimal_places=1, default=1.0, max_digits=3, verbose_name='Multiplicateur points')),
                ('daily_bonus_spins', models.IntegerField(default=0, verbose_name='Spins bonus/jour')),
                ('perks', models.JSONField(blank=True, default=dict, verbose_name='Avantages')),
            ],
            options={
                'verbose_name': 'Niveau utilisateur',
                'verbose_name_plural': 'Niveaux utilisateur',
                'db_table': 'rewards_user_level',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('special', 'Spécial')], max_length=20)),
                ('target_type', models.CharField(choices=[('receipts_count', 'Nombre de reçus'), ('receipts_amount', 'Montant total'), ('category_count', 'Reçus par catégorie'), ('merchant_count', 'Marchands différents'), ('streak_days', 'Jours consécutifs')], max_length=50)),
                ('target_value', models.IntegerField()),
                ('points_reward', models.IntegerField(default=0)),
                ('cashback_reward', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('bonus_spins', models.IntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('icon', models.CharField(default='target', max_length=50)),
                ('color', models.CharField(default='#10B981', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='receipts.category')),
            ],
            options={
                'verbose_name': 'Défi',
                'verbose_name_plural': 'Défis',
                'db_table': 'rewards_challenge',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.IntegerField(verbose_name='Montant')),
                ('transaction_type', models.CharField(choices=[('earn', 'Gain'), ('spend', 'Dépense'), ('bonus', 'Bonus'), ('expire', 'Expiration'), ('adjust', 'Ajustement')], max_length=20)),
                ('source', models.CharField(max_length=50, verbose_name='Source')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('balance_after', models.IntegerField(verbose_name='Solde après')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expire le')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='receipts.receipt')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
                ('reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rewards.reward')),
            ],
            options={
                'verbose_name': 'Transaction de points',
                'verbose_name_plural': 'Transactions de points',
                'db_table': 'rewards_point_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RewardRedemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redemption_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('points_spent', models.IntegerField(verbose_name='Points dépensés')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'Traitement'), ('completed', 'Complété'), ('delivered', 'Livré'), ('cancelled', 'Annulé'), ('failed', 'Échoué')], default='pending', max_length=20)),
                ('delivery_method', models.CharField(blank=True, max_length=50)),
                ('delivery_details', models.JSONField(blank=True, default=dict)),
                ('redemption_code', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_redemptions', to=settings.AUTH_USER_MODEL)),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='redemptions', to='rewards.reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reward_redemptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Échange de récompense',
                'verbose_name_plural': 'Échanges de récompenses',
                'db_table': 'rewards_redemption',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SpinWheelPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du prix')),
                ('prize_type', models.CharField(choices=[('points', 'Points'), ('cashback', 'Cashback'), ('spin', 'Spin gratuit'), ('multiplier', 'Multiplicateur'), ('nothing', 'Rien')], max_length=20)),
                ('prize_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('probability', models.DecimalField(decimal_places=2, help_text='Probabilité en %', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('color', models.CharField(default='#FFD700', max_length=7)),
                ('icon', models.CharField(default='star', max_length=50)),
                ('daily_limit', models.IntegerField(default=0, help_text='0 pour illimité')),
                ('total_limit', models.IntegerField(default=0, help_text='0 pour illimité')),
                ('times_won_today', models.IntegerField(default=0)),
                ('times_won_total', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
                ('wheel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prizes', to='rewards.spinwheel')),
            ],
            options={
                'verbose_name': 'Prix de roue',
                'verbose_name_plural': 'Prix de roue',
                'db_table': 'rewards_spin_prize',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SpinHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_spent', models.IntegerField(default=0)),
                ('prize_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('spun_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spin_history', to=settings.AUTH_USER_MODEL)),
                ('wheel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rewards.spinwheel')),
                ('prize', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='rewards.spinwheelprize')),
            ],
            options={
                'verbose_name': 'Historique spin',
                'verbose_name_plural': 'Historiques spin',
                'db_table': 'rewards_spin_history',
                'ordering': ['-spun_at'],
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.IntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('reward_claimed', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rewards.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Défi utilisateur',
                'verbose_name_plural': 'Défis utilisateur',
                'db_table': 'rewards_user_challenge',
            },
        ),
        migrations.AddField(
            model_name='reward',
            name='required_level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rewards.userlevel', verbose_name='Niveau requis'),
        ),
        migrations.CreateModel(
            name='LevelUpNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seen', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_notifications', to=settings.AUTH_USER_MODEL)),
                ('new_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='rewards.userlevel')),
                ('old_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='rewards.userlevel')),
            ],
            options={
                'verbose_name': 'Notification niveau',
                'verbose_name_plural': 'Notifications niveau',
                'db_table': 'rewards_levelup_notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_balance', models.IntegerField(default=0, verbose_name='Solde points')),
                ('lifetime_points', models.IntegerField(default=0, verbose_name='Points totaux gagnés')),
                ('level_progress', models.IntegerField(default=0, verbose_name='Progression niveau')),
                ('spins_available', models.IntegerField(default=3, verbose_name='Spins disponibles')),
                ('last_daily_spin', models.DateField(blank=True, null=True, verbose_name='Dernier spin quotidien')),
                ('total_spins_used', models.IntegerField(default=0, verbose_name='Total spins utilisés')),
                ('total_rewards_claimed', models.IntegerField(default=0)),
                ('last_reward_date', models.DateTimeField(blank=True, null=True)),
                ('streak_days', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('receipts_today', models.IntegerField(default=0)),
                ('points_earned_today', models.IntegerField(default=0)),
                ('last_reset_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='rewards.userlevel', verbose_name='Niveau actuel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reward_status', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Statut récompenses',
                'verbose_name_plural': 'Statuts récompenses',
                'db_table': 'rewards_user_reward',
            },
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['challenge_type', 'is_active'], name='rewards_cha_challen_f1fc6e_idx'),
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['start_date', 'end_date'], name='rewards_cha_start_d_e57190_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['user', '-created_at'], name='rewards_poi_user_id_63e508_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['expires_at'], name='rewards_poi_expires_e3b86e_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardredemption',
            index=models.Index(fields=['user', '-created_at'], name='rewards_red_user_id_d80206_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardredemption',
            index=models.Index(fields=['status', 'created_at'], name='rewards_red_status_31cf1e_idx'),
        ),
        migrations.AddIndex(
            model_name='spinhistory',
            index=models.Index(fields=['user', '-spun_at'], name='rewards_spi_user_id_691aa4_idx'),
        ),
        migrations.AddIndex(
            model_name='userchallenge',
            index=models.Index(fields=['user', 'completed'], name='rewards_use_user_id_cbd014_idx'),
        ),
        migrations.AddIndex(
            model_name='userchallenge',
            index=models.Index(fields=['challenge', 'completed'], name='rewards_use_challen_24888f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userchallenge',
            unique_together={('user', 'challenge')},
        ),
        migrations.AddIndex(
            model_name='reward',
            index=models.Index(fields=['reward_type', 'is_active'], name='rewards_rew_reward__63ed36_idx'),
        ),
        migrations.AddIndex(
            model_name='reward',
            index=models.Index(fields=['points_cost'], name='rewards_rew_points__62e84d_idx'),
        ),
    ]
