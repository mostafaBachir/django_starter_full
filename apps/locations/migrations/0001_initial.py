# Generated by Django 5.2.3 on 2025-06-27 17:35

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('receipts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('zone_type', models.CharField(choices=[('city', 'Ville'), ('district', 'Quartier'), ('region', 'Région'), ('province', 'Province'), ('country', 'Pays'), ('custom', 'Personnalisé')], default='custom', max_length=20)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(srid=4326, verbose_name='Limites')),
                ('center', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Centre')),
                ('population', models.IntegerField(blank=True, null=True, verbose_name='Population')),
                ('area_sq_km', models.FloatField(blank=True, null=True, verbose_name='Superficie km²')),
                ('zoom_level', models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Niveau zoom carte')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subzones', to='locations.zone')),
            ],
            options={
                'verbose_name': 'Zone',
                'verbose_name_plural': 'Zones',
                'db_table': 'locations_zone',
                'ordering': ['zone_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserMovementPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern_type', models.CharField(choices=[('commute', 'Trajet domicile-travail'), ('shopping_route', 'Circuit shopping'), ('weekend_routine', 'Routine weekend'), ('lunch_spots', 'Lieux déjeuner')], max_length=50)),
                ('typical_days', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, help_text='0=Lundi, 6=Dimanche', size=None)),
                ('typical_hours', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, size=None)),
                ('confidence', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('pattern_data', models.JSONField(blank=True, default=dict)),
                ('first_detected', models.DateTimeField(auto_now_add=True)),
                ('last_confirmed', models.DateTimeField(auto_now=True)),
                ('times_confirmed', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movement_patterns', to=settings.AUTH_USER_MODEL)),
                ('frequent_zones', models.ManyToManyField(related_name='user_patterns', to='locations.zone')),
            ],
            options={
                'verbose_name': 'Pattern de mouvement',
                'verbose_name_plural': 'Patterns de mouvement',
                'db_table': 'locations_movement_pattern',
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Localisation')),
                ('accuracy', models.FloatField(blank=True, null=True, verbose_name='Précision (m)')),
                ('source', models.CharField(choices=[('gps', 'GPS'), ('network', 'Réseau'), ('ip', 'Adresse IP'), ('manual', 'Manuel')], default='gps', max_length=20)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('device_id', models.CharField(blank=True, max_length=255)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_locations', to='receipts.receipt')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.zone')),
            ],
            options={
                'verbose_name': 'Localisation utilisateur',
                'verbose_name_plural': 'Localisations utilisateur',
                'db_table': 'locations_user_location',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='PlaceOfInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('poi_type', models.CharField(choices=[('mall', 'Centre commercial'), ('market', 'Marché'), ('restaurant_zone', 'Zone restaurants'), ('business_district', 'Quartier affaires'), ('tourist_spot', 'Lieu touristique'), ('transport_hub', 'Hub transport')], max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('description', models.TextField(blank=True)),
                ('amenities', models.JSONField(blank=True, default=list)),
                ('suggestion_radius', models.IntegerField(default=500, help_text='Rayon de suggestion en mètres')),
                ('peak_hours', models.JSONField(blank=True, default=dict)),
                ('popularity_score', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('merchants', models.ManyToManyField(blank=True, related_name='places_of_interest', to='receipts.merchant')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places_of_interest', to='locations.zone')),
            ],
            options={
                'verbose_name': "Lieu d'intérêt",
                'verbose_name_plural': "Lieux d'intérêt",
                'db_table': 'locations_place_of_interest',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MerchantLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom succursale')),
                ('store_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro magasin')),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Localisation')),
                ('address', models.TextField(verbose_name='Adresse')),
                ('city', models.CharField(max_length=100)),
                ('province', models.CharField(max_length=50)),
                ('postal_code', models.CharField(max_length=10)),
                ('country', models.CharField(default='CA', max_length=2)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('opening_hours', models.JSONField(blank=True, default=dict, verbose_name="Heures d'ouverture")),
                ('has_parking', models.BooleanField(default=True)),
                ('is_accessible', models.BooleanField(default=True)),
                ('accepts_cash', models.BooleanField(default=True)),
                ('accepts_cards', models.BooleanField(default=True)),
                ('validation_radius', models.IntegerField(default=200, help_text='Rayon de validation en mètres', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(1000)])),
                ('receipts_count', models.IntegerField(default=0)),
                ('average_basket', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merchant_locations', to='receipts.merchant')),
                ('zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.zone')),
            ],
            options={
                'verbose_name': 'Emplacement marchand',
                'verbose_name_plural': 'Emplacements marchands',
                'db_table': 'locations_merchant_location',
                'ordering': ['merchant', 'name'],
            },
        ),
        migrations.CreateModel(
            name='HeatmapData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aggregation_type', models.CharField(choices=[('hourly', 'Horaire'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('receipts_count', models.IntegerField(default=0)),
                ('unique_users', models.IntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_cashback', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('top_categories', models.JSONField(blank=True, default=list)),
                ('density_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heatmap_data', to='locations.zone')),
            ],
            options={
                'verbose_name': 'Donnée heatmap',
                'verbose_name_plural': 'Données heatmap',
                'db_table': 'locations_heatmap_data',
                'ordering': ['-period_start'],
            },
        ),
        migrations.CreateModel(
            name='BonusZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('geofence', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326, verbose_name='Géofence')),
                ('radius_meters', models.IntegerField(blank=True, help_text='Rayon en mètres si zone circulaire', null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(10000)])),
                ('bonus_type', models.CharField(choices=[('percentage', 'Pourcentage'), ('fixed', 'Montant fixe'), ('multiplier', 'Multiplicateur')], default='percentage', max_length=20)),
                ('bonus_value', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Valeur bonus')),
                ('max_bonus_per_receipt', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Bonus max par reçu')),
                ('daily_limit', models.IntegerField(default=0, help_text='0 pour illimité', verbose_name='Limite quotidienne')),
                ('total_budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Budget total')),
                ('budget_used', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Budget utilisé')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('time_restrictions', models.JSONField(blank=True, default=dict, help_text='Restrictions horaires')),
                ('color', models.CharField(default='#10B981', max_length=7, verbose_name='Couleur')),
                ('icon', models.CharField(default='location_on', max_length=50, verbose_name='Icône')),
                ('is_active', models.BooleanField(default=True)),
                ('requires_notification', models.BooleanField(default=True, verbose_name='Notifier utilisateurs')),
                ('times_used', models.IntegerField(default=0)),
                ('total_bonus_paid', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(blank=True, related_name='bonus_zones', to='receipts.category')),
                ('merchants', models.ManyToManyField(blank=True, related_name='bonus_zones', to='receipts.merchant')),
                ('zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bonus_zones', to='locations.zone')),
            ],
            options={
                'verbose_name': 'Zone bonus',
                'verbose_name_plural': 'Zones bonus',
                'db_table': 'locations_bonus_zone',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='LocationValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('declared_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('distance_meters', models.FloatField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('validation_method', models.CharField(choices=[('gps_match', 'Correspondance GPS'), ('zone_match', 'Correspondance zone'), ('pattern_match', 'Pattern utilisateur'), ('manual', 'Validation manuelle'), ('failed', 'Échec validation')], max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('validated_at', models.DateTimeField(auto_now_add=True)),
                ('receipt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location_validation', to='receipts.receipt')),
                ('matched_merchant_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.merchantlocation')),
            ],
            options={
                'verbose_name': 'Validation localisation',
                'verbose_name_plural': 'Validations localisation',
                'db_table': 'locations_validation',
                'indexes': [models.Index(fields=['is_valid'], name='locations_v_is_vali_515f17_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['zone_type', 'is_active'], name='locations_z_zone_ty_0a21af_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usermovementpattern',
            unique_together={('user', 'pattern_type')},
        ),
        migrations.AddIndex(
            model_name='userlocation',
            index=models.Index(fields=['user', '-recorded_at'], name='locations_u_user_id_e15cf1_idx'),
        ),
        migrations.AddIndex(
            model_name='userlocation',
            index=models.Index(fields=['zone'], name='locations_u_zone_id_0a3c81_idx'),
        ),
        migrations.AddIndex(
            model_name='merchantlocation',
            index=models.Index(fields=['merchant', 'is_active'], name='locations_m_merchan_547d31_idx'),
        ),
        migrations.AddIndex(
            model_name='merchantlocation',
            index=models.Index(fields=['city'], name='locations_m_city_9da842_idx'),
        ),
        migrations.AddIndex(
            model_name='heatmapdata',
            index=models.Index(fields=['zone', 'aggregation_type', '-period_start'], name='locations_h_zone_id_3798ea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='heatmapdata',
            unique_together={('zone', 'aggregation_type', 'period_start')},
        ),
        migrations.AddIndex(
            model_name='bonuszone',
            index=models.Index(fields=['is_active', 'start_date', 'end_date'], name='locations_b_is_acti_e2868a_idx'),
        ),
    ]
